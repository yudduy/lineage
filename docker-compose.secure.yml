# Secure Docker Compose Configuration for Citation Network Explorer
# Use this instead of the removed insecure docker-compose.yml

services:
  # Neo4j Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: citation-neo4j
    ports:
      - "7474:7474"  # Neo4j Browser
      - "7687:7687"  # Bolt protocol
    environment:
      # SECURITY: Use environment variables for credentials
      - NEO4J_AUTH=${NEO4J_USER:-neo4j}/${NEO4J_PASSWORD}
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_max__size=512M
      # Security settings
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "${NEO4J_USER:-neo4j}", "-p", "${NEO4J_PASSWORD}", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: citation-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}

volumes:
  neo4j_data:
  neo4j_logs:
  redis_data:

# Production deployment notes:
# 1. Set strong passwords via environment variables
# 2. Use secrets management (Docker Swarm secrets, Kubernetes secrets)
# 3. Enable TLS/SSL for database connections
# 4. Configure proper backup strategies
# 5. Set up monitoring and logging
